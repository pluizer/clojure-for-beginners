* Clojure for Beginners

** Values and Functions
*** Values

    Clojure's _reader_ reads code, called an _expression_ and than returns its value. Reading expressions and than and returning its value is called; _evaluating_ that expression. The most simple expression possible are just _values_ which evaluate to them self.

    For example for numbers:

    ~12~ evaluates to ~12~ and ~3.14~ evaluates to ~3.14~.

*** Functions calls
    
    An expression can also stand between parentheses, this is called a list, for example:

    #+BEGIN_SRC clojure
    (+ 12 3.14)
    #+END_SRC
    
    When Clojure's reader encounters such an expression it considers the first item of the list to evaluate to a function (more on functions later). In the last example ~+~ evaluates to a function that returns the _sum_ of its _arguments_.
    
    Everything but the first item of a list are the arguments that go in that function. Arguments are the values that the functions takes to do its work. In this example to arguments for the function ~+~ are ~12~ and ~3.14~.

    This expression than evaluates to the sum of its arguments. So ~(+ 12 3.14)~ evaluates to ~15.34~. 
    
    These lists (where the first item of the list evaluates to a function and the rest to its arguments) are called _function calls_.

    If one of the items of such a _function call_ is itself a function call the last one is evaluated first. So for example:

    #+BEGIN_SRC clojure
    (+ (+ 2 3) 4)
    #+END_SRC
    is first evaluated to
    #+BEGIN_SRC clojure
    (+ 5 4)
    #+END_SRC
    and lastly to:
    #+BEGIN_SRC clojure
    9
    #+END_SRC

    another example:
    #+BEGIN_SRC clojure
    (+ (+ 2 (+ 1 1)) (+ 3 4))
    #+END_SRC
    becomes ...
    #+BEGIN_SRC clojure
    (+ (+ 2 2) 7)
    #+END_SRC
    becomes ...
    #+BEGIN_SRC clojure
    (+ 4 7) 
    #+END_SRC
    and finally becomes ...
    #+BEGIN_SRC clojure
    13
    #+END_SRC
    
**** Exercise

     Evaluate the following expressions by hand:

    #+BEGIN_SRC clojure
    (+ 1 2)
    #+END_SRC
    
    #+BEGIN_SRC clojure
    (+ (+ 2 3) 2)
    #+END_SRC
     
    #+BEGIN_SRC clojure
    (+ (+ 2 3) 2 (+ 2 2))
    #+END_SRC
    
*** Comments    

    Anywhere the reader encounters text preceded by one or more semicolons (~;~) anything following it until the end of the line will be ignored. This is used to add human readable comments to code. For example:

    #+BEGIN_SRC clojure
    (+ 2 3) ;; this part will be ignored
    #+END_SRC
    
    will still evaluate to ~5~.
    
*** Variables
**** Let expressions

    Variables can be bounded to symbols using ~let~. An example paints a thousand words:

    #+BEGIN_SRC clojure
    (let [a 5] (+ a 3))
    ;;   ^        ^
    ;;   |-------------- here the value 5 is bounded to the symbol: a
    ;;            |----- here, a, stands for, 5, so this coded becomes
    (+ 5 3)
    ;; which evaluates to
    8
    #+END_SRC
    
***** Exercise

      Evaluate the following expressions by hand:
      
      #+BEGIN_SRC clojure
      (let [a 2] a)
      ;; ???

      (let [apple 12] appel)
      ;; ???

      (let [pear 222] (+ pear pear))
      ;; ???
      #+END_SRC
    
**** Nesting _let expressions_
    
    A _let expression_ (which is how there are called) can contain other _let expressions_, this is called nesting. for example:


    #+BEGIN_SRC clojure
    (let [a 5] (let [b 3] (+ a b)))
    ;;   ^          ^        ^ ^
    ;;   |-------------------------- here a is bounded to 5
    ;;              |--------------- and b is bounded to 3
    ;;                       |------ a, is 5 here
    ;;                         |---- and b is 3
    ;; so this code becomes
    (+ 5 3)
    ;; which still evaluates to
    8
    #+END_SRC

    #+BEGIN_SRC clojure
    (let [a 5] (let [b 3] (+ a b)))
    ;; -------                        here a, and b, do not exist yet
    ;;        -------------------     here a is bounded to 5, be does not exist
    ;;                    -------     here a is bounded to 5 and b to 3
    #+END_SRC
    
    the value that is to be bound can also be an expression, for example:

    #+BEGIN_SRC clojure
    (let [a (+ 2 3)] (+ a a))
    ;; becomes
    (let [a 5] (+ a a))
    ;; becomes
    (+ a a)
    ;; becomes
    10
    #+END_SRC
    
    the value that is to be bound can also contain the symbol of a previously bound value:

    #+BEGIN_SRC clojure
    (let [a (+ 2 3)] (let [b (+ a a)] (+ a b)))
    ;; becomes
    (let [a 5] (let [b (+ a a)] (+ a b)))
    ;; becomes
    (let [b (+ 5 5)] (+ 5 b))
    ;; becomes
    (let [b 10] (+ 5 b))
    ;; becomes
    (+ 5 10)
    ;; becomes
    15
    #+END_SRC

***** Exercise

      Evaluate the following expressions by hand:
      
      #+BEGIN_SRC clojure
      (let [a 1] (let [b 2] (+ a b)))
      ;; ???
      
      (let [a 1] (let [b (+ a 2)] (+ a b)))
      ;; ???

      (let [a (+ 2 2)] (let [b (+ a a)] (+ b b)))
      ;; ???
      #+END_SRC

**** Shadowing    

     When a nested let expressions contains a symbol that was already bound the this first binding will _shadow_ the first. That means that a symbol will evaluate to its most inner binding. The outer binding are not visible anymore. To show you:

     #+BEGIN_SRC clojure
     (let [a 4] (let [a 3] a))
     ;; -------                a, does not exist here yet
     ;;         ----------     here a, is sill bounded to 4
     ;;                   --   here a is bounded to 4, it shadows the a bounded to 3.
     ;; so this expression becomes
     3
     #+END_SRC
     
     Some more examples ...
     #+BEGIN_SRC clojure
     (let [a 3] (let [a a] a))
     ;; becomes
     (let [a 3] a)
     ;; becomes
     3

     (let [a 3] (let [a (+ a a)] a))
     ;; -------                       here there is no, a, yet.
     ;;        -----------------      here is is bounded to 3
     ;;                         --    here a is bounded to the evaluation of (+ a a)
     ;; so,...
     (let [a 3] (let [a (+ a a)] a))
     ;; becomes
     (let [a (+ 3 3)] a)
     ;; becomes
     (let [a 6] a)
     ;; becomes
     6
     #+END_SRC

***** Exercise

      Evaluate the following expressions by hand:
      
      #+BEGIN_SRC clojure
      (let [a 1] (let [a 2] a))
      ;; ???

      (let [a 1] (let [a 2] (+ a a)))
      ;; ???

      (let [a 1] (let [a (+ a a)] a))
      ;; ???
      
      (let [a 1] (let [a (+ a a)] (+ a a)))
      ;; ???

      (let [a 1] (let [a (+ a 1)] (let [a (+ a 1)] a))
      ;; ???
      #+END_SRC
